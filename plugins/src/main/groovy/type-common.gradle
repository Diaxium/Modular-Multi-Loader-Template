// Apply necessary plugins
plugins {
    id 'java-library'      // For creating a Java library
    id 'maven-publish'    // Enables publishing to a Maven repository
}

// Set the archive name using project-specific variables
base {
    archivesName = "${project_id}-${project.name}-${minecraft_version}"
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(java_version) // Set Java version
    withSourcesJar()   // Include sources JAR
    withJavadocJar()   // Include Javadoc JAR
}

// Define repositories for dependencies
repositories {
    mavenCentral() // Use Maven Central repository

    // Sponge repository for specific dependencies
    exclusiveContent {
        forRepository {
            maven {
                name = 'Sponge'
                url = uri("https://repo.spongepowered.org/repository/maven-public")
            }
        }
        filter { includeGroupAndSubgroups("org.spongepowered") }
    }

    // ParchmentMC and NeoForge repositories
    exclusiveContent {
        forRepositories(
                maven {
                    name = 'ParchmentMC'
                    url = uri("https://maven.parchmentmc.org/")
                },
                maven {
                    name = "NeoForge"
                    url = uri("https://maven.neoforged.net/releases")
                }
        )
        filter { includeGroup("org.parchmentmc.data") }
    }

    // Additional repositories
    maven {
        url = uri("https://maven.twelveiterations.com/repository/maven-public/")
        content { includeGroup "net.blay09.mods" }
    }

    maven {
        name = "BlameJared"
        url = uri("https://maven.blamejared.com")
    }
}

// Declare capabilities for outgoing configurations
['apiElements', 'runtimeElements', 'sourcesElements', 'javadocElements'].each { variant ->
    configurations."$variant".outgoing {
        capability("${project_group}:${base.archivesName.get()}:${project_version}")
        capability("${project_group}:${project_id}-${project.name}-${minecraft_version}:${project_version}")
        capability("${project_group}:${project_id}:${project_version}")
    }

    publishing.publications.configureEach {
        suppressPomMetadataWarningsFor(variant) // Suppress metadata warnings
    }
}

// Include the license file in the sources JAR
sourcesJar {
    from(rootProject.file('LICENSE')) {
        rename { "${it}_${project_name}" }
    }
}

// Configure the JAR task
jar {
    from(rootProject.file('LICENSE')) {
        rename { "${it}_${project_name}" }
    }

    manifest {
        attributes([
                'Specification-Title'   : "${project_name}",
                'Specification-Vendor'  : "${project_author}",
                'Specification-Version' : "${project.jar.archiveVersion}",
                'Implementation-Title'  : "${project.name}",
                'Implementation-Version': "${project.jar.archiveVersion}",
                'Implementation-Vendor' : "${project_author}",
                'Built-On-Minecraft'    : "${minecraft_version}"
        ])
    }
}

// Process resource files and inject project properties
processResources {
    def expandProps = [
            'project_version'              : "${project_version}",
            'project_group'                : "${project.group}",
            'pack_format_number'           : "${pack_format_version}",
            'minecraft_version'            : "${minecraft_version}",
            'minecraft_version_range'      : "${minecraft_version_range}",
            'fabric_version'               : "${fabric_version}",
            'fabric_loader_version'        : "${fabric_loader_version}",
            'project_name'                 : "${project_name}",
            'project_author'               : "${project_author}",
            'project_id'                   : "${project_id}",
            'project_license'              : "${project_license}",
            'project_description'          : "${project_description}",
            'neoforge_version'             : "${neoforge_version}",
            'neoforge_loader_version_range': "${neoforge_loader_version_range}",
            'forge_version'                : "${forge_version}",
            'forge_loader_version_range'   : "${forge_loader_version_range}",
            'project_credits'              : "${project_credits}",
            'java_version'                 : "${java_version}"
    ]

    filesMatching(['pack.mcmeta', 'fabric.mod.json', 'META-INF/mods.toml', 'META-INF/neoforge.mods.toml', '*.mixins.json']) {
        expand expandProps
    }
    inputs.properties(expandProps)
}

// Configure publishing to a Maven repository
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
    repositories {
        maven {
            url System.getenv('local_maven_url') // Use environment variable for repository URL
        }
    }
}

// Include core modules in the JAR
jar {
    from { project(':core:api').sourceSets.main.output }
    from { project(':core:utils').sourceSets.main.output }
}

// Configure Javadoc tasks
tasks.withType(Javadoc).configureEach {
    options.addStringOption('Xdoclint:none', '-quiet') // Suppress doclint warnings
}
