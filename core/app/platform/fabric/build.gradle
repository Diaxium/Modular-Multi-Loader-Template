// #:Core:App:Platform:Fabric Build.gradle

plugins {
    id("type-platform")
    id("fabric-loom")
}

dependencies {
    // Project dependencies - referencing other modules in the project
    api project(':core:api')                // Exposes the API module to consumers of this module
    implementation project(':core:utils')   // Uses the utils module internally only

    // Third-party library dependencies
    implementation libs.balm.fabric         // Adds Balm API support for Fabric
    implementation libs.kuma.fabric         // Includes Kuma library for Fabric platform

    // Configuration with dynamic version handling
    implementation (libs.balm.fabric) {
        changing = libs.versions.balm.get().endsWith("SNAPSHOT")  // Updates Balm immediately when using SNAPSHOT versions
    }

    // Bundled dependencies for better organization
    implementation libs.bundles.night.config  // Configuration file handling libraries
    implementation libs.bundles.log4j         // Logging framework and extensions

    // Testing dependencies
    testImplementation libs.bundles.junit     // JUnit testing framework and extensions

    // Minecraft and Fabric environment setup
    minecraft "com.mojang:minecraft:${minecraft_version}"  // Core Minecraft game
    mappings loom.layered {
        officialMojangMappings()              // Official Mojang obfuscation mappings
        parchment("org.parchmentmc.data:parchment-${parchment_minecraft}:${parchment_version}@zip")  // Adds Parchment community mappings for better field/method names
    }
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"  // Fabric mod loader
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"  // Fabric API providing hooks and utilities
}

loom {
    def aw = project(':core:app:common').file("src/main/resources/${project_id}.accesswidener")
    if (aw.exists()) {
        accessWidenerPath.set(aw)
    }
    mixin {
        defaultRefmapName.set("${project_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName('Fabric Client')
            ideConfigGenerated(true)
            runDir('runs/client')
        }
        server {
            server()
            setConfigName('Fabric Server')
            ideConfigGenerated(true)
            runDir('runs/server')
        }
    }
}

test {
    useJUnitPlatform()
}