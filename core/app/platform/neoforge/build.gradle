// #:Core:App:Platform:Neoforge Build.gradle

plugins {
    id("type-platform")
    id("net.neoforged.moddev")
}

dependencies {
    // Project dependencies - referencing other modules in the project
    api project(':core:api')                // Exposes the API module to consumers of this module
    implementation project(':core:utils')   // Uses the utils module internally only

    // Third-party library dependencies for NeoForge platform
    implementation libs.balm.neoforge       // Balm mod API configured for NeoForge
    implementation libs.kuma.neoforge       // Kuma library for NeoForge platform

    // Configuration with dynamic version handling
    implementation (libs.balm.neoforge) {
        changing = libs.versions.balm.get().endsWith("SNAPSHOT")  // Updates Balm immediately when using SNAPSHOT versions
    }

    // Bundled dependencies for better organization
    implementation libs.bundles.night.config  // Configuration file handling libraries
    implementation libs.bundles.log4j         // Logging framework and extensions

    // Testing dependencies
    testImplementation libs.bundles.junit     // JUnit testing framework and extensions
}

neoForge {
    version = neoforge_version
    // Automatically enable neoforge AccessTransformers if the file exists
    def at = project(':core:app:common').file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformers.add(at.absolutePath)
    }
    parchment {
        minecraftVersion = parchment_minecraft
        mappingsVersion = parchment_version
    }

    validateAccessTransformers = true

    runs {
        configureEach {
            systemProperty('neoforge.enabledGameTestNamespaces', project_id)
            ideName = "NeoForge ${it.name.capitalize()} (${project.path})" // Unify the run config names with fabric
        }
        client {
            client()
        }
        data {
            data()
        }
        server {
            server()
        }
    }
    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

test {
    useJUnitPlatform()
}