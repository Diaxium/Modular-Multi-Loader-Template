// #:Core:App:Common Build.gradle

plugins {
    id ("type-common")
    id ("net.neoforged.moddev")
}

dependencies {
    // Project dependencies - referencing other modules in the project
    api project(':core:api')                // Exposes the API module to consumers of this module
    implementation project(':core:utils')   // Uses the utils module internally only

    // Third-party library dependencies (platform-agnostic)
    implementation libs.balm.common         // Balm mod API for common (shared) code
    implementation libs.kuma.common         // Kuma library for common code

    // Configuration with dynamic version handling
    implementation (libs.balm.common) {
        changing = libs.versions.balm.get().endsWith("SNAPSHOT")  // Updates Balm immediately when using SNAPSHOT versions
    }

    // Bundled dependencies for better organization
    implementation libs.bundles.night.config  // Configuration file handling libraries
    implementation libs.bundles.log4j         // Logging framework and extensions

    // Testing dependencies
    testImplementation libs.bundles.junit     // JUnit testing framework and extensions

    // Mixin support for transforming Minecraft code at runtime
    compileOnly libs.mixin                    // Mixin annotation processor - compile-time only dependency

    // MixinExtras for enhanced mixin functionality
    compileOnly libs.mixinextras.common       // Extended mixin capabilities - compile-time only
    annotationProcessor libs.mixinextras.common  // Processes MixinExtras annotations during compilation
}

neoForge {
    neoFormVersion = neo_form_version
    // Automatically enable AccessTransformers if the file exists
    def at = file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformers.add(at.absolutePath)
    }
    parchment {
        minecraftVersion = parchment_minecraft
        mappingsVersion = parchment_version
    }
}

configurations {
    commonJava {
        canBeResolved = false
        canBeConsumed = true
    }
    commonResources {
        canBeResolved = false
        canBeConsumed = true
    }
}

artifacts {
    commonJava sourceSets.main.java.sourceDirectories.singleFile
    commonResources sourceSets.main.resources.sourceDirectories.singleFile
}

test {
    useJUnitPlatform()
}